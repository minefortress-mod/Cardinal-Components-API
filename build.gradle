import com.modrinth.minotaur.TaskModrinthUpload
import net.fabricmc.loom.task.RemapJarTask

import java.time.Year

plugins {
    id "fabric-loom" version "0.11-SNAPSHOT" apply false
    id 'io.github.juuxel.loom-quiltflower' version "1.6.0"
    id "org.cadixdev.licenser" version "0.6.1"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'com.modrinth.minotaur' version '1.2.1'
    id "com.jfrog.artifactory" version "4.21.0"
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id "maven-publish"
    id "java-library"
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'fabric-loom'
    apply plugin: 'org.cadixdev.licenser'

    tasks.withType(JavaCompile) {
        it.options.release = 17
    }

    group = "dev.onyxstudios.cardinal-components-api"
    version = project.mod_version

    // import utility functions
    apply from: rootProject.file("utilities.gradle")

    repositories {
        maven {
            name = 'Ladysnake Mods'
            url = 'https://ladysnake.jfrog.io/artifactory/mods'
            content {
                includeGroup 'io.github.ladysnake'
                includeGroupByRegex 'dev\\.emi.*'
                includeGroupByRegex 'dev\\.onyxstudios.*'
            }
        }
        maven {
            name = "JitPack"
            url = "https://jitpack.io"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings "net.fabricmc:yarn:${minecraft_version}+build.${yarn_mappings}:v2"
        modApi "net.fabricmc:fabric-loader:${loader_version}"
        modApi fabricApi.module("fabric-api-base", fabric_api_version)
        modImplementation fabricApi.module("fabric-networking-api-v1", fabric_api_version)
        modCompileOnly fabricApi.module("fabric-gametest-api-v1", fabric_api_version)
        modCompileOnly modLocalRuntime("io.github.ladysnake:elmendorf:${elmendorf_version}")

        compileOnly "com.google.code.findbugs:jsr305:3.0.2"
        compileOnly "com.demonwav.mcdev:annotations:1.0"
        compileOnly "org.jetbrains:annotations:19.0.0"
    }

    loom {
        shareRemapCaches = true
    }

    repositories {
        mavenLocal()
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    license {
        header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")
        include "**/*.java"

        style {
            java = "BLOCK_COMMENT"
        }
        newLine = false // Disables the empty line between the header and package name
        //ignoreFailures = true //Ignore failures and only print a warning on license violations

        //export variables
        ext {
            year = Year.now()
            projectDisplayName = project.display_name
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    jar {
        from(rootProject.file("LICENSE.md")) {
            rename { "LICENSE_${project.archivesBaseName.replace('-', '_')}"}
        }
    }
}

javadoc {
    options {
        source = "16"
        encoding = "UTF-8"
        charSet = "UTF-8"
        memberLevel = JavadocMemberLevel.PACKAGE
        links(
            "https://guava.dev/releases/21.0/api/docs/",
            "https://asm.ow2.io/javadoc/",
            "https://docs.oracle.com/javase/8/docs/api/",
            "http://jenkins.liteloader.com/job/Mixin/javadoc/",
            "https://logging.apache.org/log4j/2.x/log4j-api/apidocs/"
            // Need to add minecraft jd publication etc once there is one available
        )
        // Disable the crazy super-strict doclint tool in Java 8
        addStringOption("Xdoclint:none", "-quiet")
    }

    allprojects.each {
        source(it.sourceSets.main.allJava.srcDirs)
    }

    classpath = sourceSets.main.compileClasspath
    include("**/api/**")
    failOnError false
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
    //Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
    archiveClassifier = "fatjavadoc"
}

assemble.dependsOn javadocJar

loom {

    interfaceInjection {
        subprojects.each {
            interfaceInjectionSourceSets.add(project(":${it.name}").sourceSets.main)
        }
    }
}

subprojects {
    version = rootProject.version

    publishing {
        publications {
            relocation(MavenPublication) {
                pom {
                    // Old artifact coordinates
                    groupId = "io.github.onyxstudios.Cardinal-Components-API"

                    distributionManagement {
                        relocation {
                            // New artifact coordinates
                            groupId = "dev.onyxstudios.cardinal-components-api"
                            message = "groupId has been changed"
                        }
                    }
                }
            }
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    javadoc.enabled = false

    afterEvaluate {
        // Disable the gen sources task on sub projects
        genSourcesWithFernFlower.enabled = false
        genSourcesWithCfr.enabled = false
        unpickJar.enabled = false
    }
}

task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}
assemble.dependsOn remapMavenJar

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapMavenJar) {
                builtBy remapMavenJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            artifact javadocJar

            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

// Required until the deprecation is removed. CCA's main jar that is published to maven does not contain sub modules.
loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

dependencies {
    // used by the test mod
    modImplementation fabricApi.module("fabric-api-base", fabric_api_version)
    modImplementation fabricApi.module("fabric-object-builder-api-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-renderer-registries-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-lifecycle-events-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-item-api-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-item-groups-v0", fabric_api_version)
    modImplementation fabricApi.module("fabric-events-interaction-v0", fabric_api_version)
    modImplementation fabricApi.module("fabric-api-lookup-api-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-command-api-v1", fabric_api_version)
    modImplementation fabricApi.module("fabric-gametest-api-v1", fabric_api_version)
    modLocalRuntime fabricApi.module("fabric-registry-sync-v0", fabric_api_version)
    modLocalRuntime fabricApi.module("fabric-networking-v0", fabric_api_version)
    modLocalRuntime fabricApi.module("fabric-resource-loader-v0", fabric_api_version)
    modLocalRuntime fabricApi.module("fabric-events-interaction-v0", fabric_api_version)

    testCompileOnly "com.google.code.findbugs:jsr305:3.0.2"

    include fabricApi.module("fabric-api-base", fabric_api_version)
    include fabricApi.module("fabric-networking-v0", fabric_api_version)

    afterEvaluate {
        subprojects.each {
            api project(path: ":${it.name}", configuration: "namedElements")
            include project("${it.name}:")
        }
    }
}

ext {
    // no idea how else to import TaskModrinthUpload from release.gradle
    ModrinthUpload = TaskModrinthUpload
}

apply from: 'release.gradle'
